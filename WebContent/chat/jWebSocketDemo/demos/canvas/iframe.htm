<!DOCTYPE html PUBLIC "-//W3C//DTD html 4.01//EN" "http://www.w3.org/TR/html4/transitional.dtd">
<html>
	<head>
		<meta http-equiv="X-UA-Compatible" content="chrome=1">
		<!-- If Google's chrome frame installed, use it! -->
		<!-- Comment needs to be BELOW this meta tag! -->
		<!--
		//	****************************************************************************
		//	jWebSocket Simple Chat (uses jWebSocket Client and Server)
		//	Copyright (c) 2010 Alexander Schulze, Innotrade GmbH, Herzogenrath
		//	****************************************************************************
		//	This program is free software; you can redistribute it and/or modify it
		//	under the terms of the GNU Lesser General Public License as published by the
		//	Free Software Foundation; either version 3 of the License, or (at your
		//	option) any later version.
		//	This program is distributed in the hope that it will be useful, but WITHOUT
		//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
		//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
		//	more details.
		//	You should have received a copy of the GNU Lesser General Public License along
		//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
		//	****************************************************************************
		-->
		<meta http-equiv="Content-Language" content="en">
		<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
		<title>jWebSocket Chat Demo</title>
		<link rel="stylesheet" type="text/css" href="../../res/css/jwebsocket.css">
		<script src="../../res/js/jWebSocket.js" type="text/javascript"></script>
		<script type="text/javascript" language="JavaScript">
			var lJWSID = "jWebSocket Chat",
			lWSC = null,
			eLog = null,
			eUsername = null,
			ePool = null,
			eMessage = null,
			eDebug = null,
			eKeepAlive = null;

			var IN = 0;
			var OUT = 1;
			var EVT = 2;
			var SYS = "SYS";
			var USR = null;

			// append a line to the log text area
			function log( aUsername, aEvent, aString ) {
				var lFlag;
				switch( aEvent ) {
					case IN: lFlag = "<"; break;
					case OUT: lFlag = ">"; break;
					case EVT: lFlag = "*"; break;
					default: lFlag = "?";
				}
				// set a default user name if not yet logged in
				if( !aUsername ) {
					aUsername = lWSC.getUsername();
				}
				if( !aUsername ) {
					aUsername = "USR";
				}
				eLog.innerHTML +=
					aUsername + " " +
					lFlag + " " +
					aString + "<br>";
				if( eLog.scrollHeight > eLog.clientHeight ) {
					eLog.scrollTop = eLog.scrollHeight - eLog.clientHeight;
				}
			}

			function clearLog() {
				eLog.innerHTML = "";
				eLog.scrollTop = 0;
			}

			function doFocus( aElement ) {
				aElement.focus();
				aElement.select();
			}

			function doOpen() {
				// adjust this URL to your jWebSocket server
				var lURL = jws.JWS_SERVER_URL + "/;prot=json,timeout=360000";
				log( SYS, OUT, "Connecting to " + lJWSID + " at " + lURL + "..." );

				// try to establish connection to jWebSocket server
				lWSC.logon( lURL, eUsername.value, "", {

					// OnOpen callback
					OnOpen: function( aEvent ) {
						log( SYS, IN, "Connection to " + lJWSID + " established." );
						// start keep alive if user selected that option
						checkKeepAlive({ immediate: false });
					},

					// OnMessage callback
					OnMessage: function( aEvent, aToken ) {
						// for debug purposes
						if( eDebug.checked ) {
							log( SYS, EVT, "<font style='color:#888'>" +
								( aToken ? aToken.type : "-" ) + ": " +
								aEvent.data + "</font>");
						}
						if( aToken ) {
							// is it a response from a previous request of this client?
							if( aToken.type == "response" ) {
								// figure out of which request
								if( aToken.reqType == "login" ) {
									if( aToken.code == 0 ) {
										log( SYS, IN, "Welcome '" + aToken.username + "'" );
										// select message field for convenience
										doFocus( eMessage );
										// call getAuthClients method from
										// jWebSocket System Client Plug-In
										lWSC.getAuthClients({
											pool: null
										});
									} else {
										log( SYS, IN, "Error logging in '" + + "': " + aToken.msg );
										// select username again for convenience
										doFocus( eUsername );
									}
								} else if( aToken.reqType == "getClients" ) {
									log( SYS, IN, "Clients (" + aToken.count + "): " + aToken.clients );
								}
								// is it an event w/o a previous request ?
							} else if( aToken.type == "event" ) {
								// interpret the event name
								// :
							} else if( aToken.type == "goodBye" ) {
								log( SYS, IN, lJWSID + " says good bye (reason: " + aToken.reason + ")!" );
								doFocus( eUsername );
								// is it any token from another client
							} else if( aToken.type == "broadcast" ) {
								if( aToken.data ) {
									log( aToken.sender, IN, aToken.data );
								}
							}
						}
					},

					// OnClose callback
					OnClose: function( aEvent ) {
						lWSC.stopKeepAlive();
						log( SYS, IN, "Disconnected from " + lJWSID + "." );
						doFocus( eUsername );
					}
					
				});
			}

			function getClients() {
				var lRes = lWSC.getAuthClients({
					pool: null
				});
				log( SYS, OUT, "getClients: " + lRes.msg );
			}

			function doClose() {
				// disconnect automatically logs out!
				lWSC.stopKeepAlive();
				var lRes = lWSC.close({
					// wait a maximum of 3 seconds for server good bye message
					timeout: 3000
				});
				log( SYS, OUT, "logout: " + lRes.msg );
			}

			var ctx;
			var lPainting = false;
			var lX = -1;
			var lX = -1;

			function mouseDownLsnr( aEvent ) {
				lPainting = true;
				lX = aEvent.clientX - eCanvas.offsetLeft;
				lY = aEvent.clientY - eCanvas.offsetTop;
				ctx.beginPath();
				ctx.moveTo(lX,lY);
				console.log("Start x: " + lX + ", y: " + lY);
			}

			function mouseMoveLsnr( aEvent ) {
				if( lPainting ) {
					console.log("Drawing x: " + lX + ", y: " + lY);
					lX = aEvent.clientX - eCanvas.offsetLeft;
					lY = aEvent.clientY - eCanvas.offsetTop;
					ctx.lineTo(lX,lY);
					ctx.stroke();
				}
			}

			function mouseUpLsnr( aEvent ) {
				lX = aEvent.clientX - eCanvas.offsetLeft;
				lY = aEvent.clientY - eCanvas.offsetTop;
				ctx.lineTo(lX,lY);
				ctx.closePath();
				console.log("Stop x: " + lX + ", y: " + lY);
				lPainting = false;
			}

			function checkKeepAlive( aOptions ) {
				if( !aOptions ) {
					aOptions = {};
				}
				aOptions.interval = 30000;
				if( eKeepAlive.checked ) {
					lWSC.startKeepAlive( aOptions );
				} else {
					lWSC.stopKeepAlive();
				}
			}

			function initPage() {
				// get some required HTML elements
				eCanvas = jws.$( "cnvDemo" );

				ctx = eCanvas.getContext( "2d" );

				eCanvas.addEventListener( "mousedown", mouseDownLsnr, false );
				eCanvas.addEventListener( "mousemove", mouseMoveLsnr, false );
				eCanvas.addEventListener( "mouseup", mouseUpLsnr, false );

				ctx.fillStyle = "rgb(200,0,0)";
				ctx.fillRect (10, 10, 55, 50);
				ctx.fillStyle = "rgba(0, 0, 200, 0.5)";
				ctx.fillRect (30, 30, 55, 50);

				// check if WebSockets are supported by the browser
				if( jws.browserSupportsWebSockets() ) {
					// instaniate new TokenClient, either JSON, CSV or XML
					lWSC = new jws.jWebSocketJSONClient();
					// lWSC = new jws.jWebSocketCSVClient();
					// jws.events.addEventListener( eMessage, "focus", elemFocusLsnr );
				} else {
					// jws.$( "sbtnClearLog" ).setAttribute( "disabled", "disabled" );
					// eMessage.setAttribute( "disabled", "disabled" );
					
					var lMsg = jws.MSG_WS_NOT_SUPPORTED;
					alert( lMsg );
				}
			}

			function exitPage() {
				// this allows the server to release the current session
				// immediately w/o waiting on the timeout.
				if( lWSC ) {
					lWSC.close({
						// force immediate client side disconnect
						timeout: 0
					});
				}
			}

		</script>
	</head>

	<body
		onload="initPage();"
		onunload="exitPage();"
		>
		<div style="border:1px solid red">
			<canvas id="cnvDemo" width="300" height="300" style="border:1px solid green" >
			</canvas>
		</div>
	</body>
</html>
